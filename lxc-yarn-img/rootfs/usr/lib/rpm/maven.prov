#!/usr/bin/python3
# Copyright (c) 2014, Red Hat, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the
#    distribution.
# 3. Neither the name of Red Hat nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Authors: Alexander Kurtakov <akurtako@redhat.com>
#          Stanislav Ochotnicky <sochotnicky@redhat.com>
#          Michal Srb <msrb@redhat.com>

import sys
import os
import signal
import traceback
import logging
from javapackages.metadata.metadata import Metadata
from javapackages.cache.metadata import MetadataCache
from javapackages.common.util import kill_parent_process, init_rpmgen, get_logger

_log = get_logger("maven.prov")


class TagBuilder:
    def __init__ (self, filelist=None):
        if filelist == None:
            filelist = sys.stdin
        paths = [line.rstrip() for line in filelist.readlines()]
        _log.info("input: {fl}".format(fl=paths))

        cache = MetadataCache(rpmconf)
        for path in paths:
            metadata = cache.get_metadata_for_path(path)

            provides = set()
            for artifact in metadata.artifacts:
                provides.add(artifact.get_rpm_str(namespace=artifact.namespace,
                                                  pkgver=artifact.version))
            # print OSGi provides from metadata
            osgi_provides = metadata.get_osgi_provides()
            for p in osgi_provides:
                provides.add(p.get_rpm_str())
            _log.info(", ".join(provides))
            if provides:
                print('\n'.join(provides))


if __name__ == "__main__":
    rpmconf = None
    try:
        rpmconf = init_rpmgen(sys.argv)
        builder = TagBuilder()
    except Exception:
        traceback.print_exc(file=sys.stderr)
        kill_parent_process(rpmconf)


# Local Variables:
# mode: Python
# End:
