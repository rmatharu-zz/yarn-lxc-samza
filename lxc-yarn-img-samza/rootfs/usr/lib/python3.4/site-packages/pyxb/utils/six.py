"""Utilities for writing code that runs on Python 2 and 3"""

# Copyright (c) 2010-2014 Benjamin Peterson
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from __future__ import absolute_import
from six import *

__author__ = "Benjamin Peterson <benjamin@python.org>"
__version__ = "1.5.2"


if PY3:
    none_type = type(None)
    boolean_type = bool
    float_type = float
    int_type = int
    long_type = int
    list_type = list
    tuple_type = tuple
    dictionary_type = dict

    import sys
    import io
    intern = sys.intern
    file = io.IOBase
else:
    import types
    none_type = types.NoneType
    boolean_type = types.BooleanType
    int_type = types.IntType
    long_type = types.LongType
    float_type = types.FloatType
    list_type = types.ListType
    tuple_type = types.TupleType
    dictionary_type = types.DictionaryType

    import __builtin__
    intern = __builtin__.intern
    file = __builtin__.file


def unicode_convertible (clazz):
    if not PY3:
        import pyxb
        clazz.__unicode__ = clazz.__str__
        clazz.__str__ = lambda _s: _s.__unicode__().encode(pyxb._OutputEncoding)
    return clazz
